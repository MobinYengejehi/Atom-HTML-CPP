#/*****************************************************************************
# *
# *  PROJECT:     Atom HTML Graphics Library for `C & CPP`
# *               (https://github.com/MobinYengejehi/Atom-HTML-CPP)
# *  LICENSE:     See LICENSE in the top level directory
# *  FILE:        AtomCmake.cmake
# * 
# *  AUTHOR:      MobinYengejehi
# *  GITHUB:      https://github.com/MobinYengejehi
# *
# *****************************************************************************/

if (NOT DEFINED ATOM_DIRECTORY)
	set(ATOM_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
endif()
if (NOT DEFINED ATOM3D_DIRECTORY)
	set(ATOM3D_DIRECTORY ${ATOM_DIRECTORY}/Atom3D)
endif()
if (NOT DEFINED ATOM_LIBRARIES_DIRECTORY)
	set(ATOM_LIBRARIES_DIRECTORY ${ATOM_DIRECTORY}/Libraries)
endif()
if (NOT DEFINED ATOM_LIBRARIES_INCLUDE_DIRECTORY)
	set(ATOM_LIBRARIES_INCLUDE_DIRECTORY ${ATOM_LIBRARIES_DIRECTORY}/includes)
endif()
if (NOT DEFINED ATOM_LIBRARIES_SOURCE_DIRECTORY)
	set(ATOM_LIBRARIES_SOURCE_DIRECTORY ${ATOM_LIBRARIES_DIRECTORY}/src)
endif()

if (WIN32)
	if (NOT DEFINED ATOM_SYSTEM_OS_WINDOWS)
		set(ATOM_SYSTEM_OS_WINDOWS TRUE)
		set(ATOM_LINKER_SUFFIX lib)
		set(ATOM_LIBRARY_SUFFIX dll)
		add_compile_definitions(ATOM_SYSTEM_OS_WINDOWS=1)
	endif()
elseif (UNIX AND NOT APPLE)
	if (NOT DEFINED ATOM_SYSTEM_OS_UNIX_AND_LINUX)
		set(ATOM_SYSTEM_OS_UNIX_AND_LINUX TRUE)
		set(ATOM_LINKER_SUFFIX a)
		set(ATOM_LIBRARY_SUFFIX so)
		add_compile_definitions(ATOM_SYSTEM_OS_UNIX_AND_LINUX=1)
	endif()
elseif (APPLE)
	if (NOT DEFINED ATOM_SYSTEM_OS_MAC)
		set(ATOM_SYSTEM_OS_MAC TRUE)
		add_compile_definitions(ATOM_SYSTEM_OS_MAC=1)
	endif()
elseif (ANDROID)
	if (NOT DEFINED ATOM_SYSTEM_OS_ANDROID)
		set(ATOM_SYSTEM_OS_ANDROID TRUE)
		add_compile_definitions(ATOM_SYSTEM_OS_ANDROID=1)
	endif()
else()
	set(ATOM_SYSTEM_OS_UNKNOWN TRUE)
	add_compile_definitions(ATOM_SYSTEM_OS_UNKNOWN=1)
endif()

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(ATOM_SYSTEM_64_BIT TRUE)
	add_compile_definitions(ATOM_SYSTEM_64_BIT)
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
	set(ATOM_SYSTEM_32_BIT TRUE)
	add_compile_definitions(ATOM_SYSTEM_32_BIT)
endif()

if (DEFINED ATOM_COMPILING_LIBRARY)
	add_compile_definitions(ATOM_COMPILING_LIBRARY=1)
else()
	add_compile_definitions(ATOM_COMPILING_LIBRARY=0)
endif()

if (NOT DEFINED ATOM_OPENGL_LINKER_DIRECTORY)
	if (DEFINED ATOM_SYSTEM_OS_WINDOWS)
		set(ATOM_OPENGL_LINKER_DIRECTORY ${ATOM_LIBRARIES_DIRECTORY}/libs/windows)
	elseif (DEFINED ATOM_SYSTEM_OS_UNIX_AND_LINUX)
		set(ATOM_OPENGL_LINKER_DIRECTORY ${ATOM_LIBRARIES_DIRECTORY}/libs/unix_linux)
	endif()
endif()

if (DEFINED ATOM_OPENGL_LINKER_DIRECTORY)
	if (NOT DEFINED ATOM_GLFW_LINKER)
		if (DEFINED ATOM_SYSTEM_64_BIT)
			set(ATOM_GLFW_LINKER ${ATOM_OPENGL_LINKER_DIRECTORY}/x64/glfw3.${ATOM_LINKER_SUFFIX})
			set(ATOM_GLEW_LINKER ${ATOM_OPENGL_LINKER_DIRECTORY}/x64/glew32s.${ATOM_LINKER_SUFFIX})
		elseif (DEFINED ATOM_SYSTEM_32_BIT)
			set(ATOM_GLFW_LINKER ${ATOM_OPENGL_LINKER_DIRECTORY}/x32/glfw3.${ATOM_LINKER_SUFFIX})
			set(ATOM_GLEW_LINKER ${ATOM_OPENGL_LINKER_DIRECTORY}/x32/glew32s.${ATOM_LINKER_SUFFIX})
		endif()
	endif()
endif()

if (DEFINED ATOM_SOURCE_DEVELOPEMENT_MODE)
	add_compile_definitions(ATOM_SOURCE_DEVELOPEMENT_MODE=1)
else()
	add_compile_definitions(ATOM_SOURCE_DEVELOPEMENT_MODE=0)
endif()

if (NOT DEFINED ATOM_SYSTEM_OS_UNKNOWN)
	if (NOT DEFINED ATOM_DOM_DIRECTORY)
		set(ATOM_DOM_DIRECTORY ${ATOM_DIRECTORY}/AtomDOM)
	endif()

	if (DEFINED ATOM_GLFW_LINKER AND NOT DEFINED ATOM_EXTERNAL_LIB_LINKER)
		set(ATOM_EXTERNAL_LIB_LINKER ${ATOM_GLFW_LINKER} ${ATOM_GLEW_LINKER})
		add_compile_definitions(GLEW_STATIC)
	endif()
	
	find_package(OpenGL REQUIRED)

	include_directories(${ATOM_LIBRARIES_INCLUDE_DIRECTORY})

	file(GLOB ATOM_LIB_HEADERS
		${ATOM_DIRECTORY}/*.h
		${ATOM3D_DIRECTORY}/*.h
		${ATOM_DOM_DIRECTORY}/*.h

		${ATOM_LIBRARIES_INCLUDE_DIRECTORY}/glad/*.h
		${ATOM_LIBRARIES_INCLUDE_DIRECTORY}/GLFW/*.h
		${ATOM_LIBRARIES_INCLUDE_DIRECTORY}/KHR/*.h
	)

	file(GLOB ATOM_LIB_SOURCES
		${ATOM_DIRECTORY}/*.c
		${ATOM3D_DIRECTORY}/*.c
		${ATOM_DOM_DIRECTORY}/*.c

		${ATOM_DIRECTORY}/*.cpp
		${ATOM3D_DIRECTORY}/*.cpp
		${ATOM_DOM_DIRECTORY}/*.cpp
		
		${ATOM_LIBRARIES_SOURCE_DIRECTORY}/*.c
		${ATOM_LIBRARIES_SOURCE_DIRECTORY}/*.cpp
	)
else()
	file(GLOB ATOM_LIB_HEADERS
		${ATOM_DIRECTORY}/*.h
		${ATOM3D_DIRECTORY}/*.h
		${ATOM_LIBRARIES_INCLUDE_DIRECTORY}/glad/*.h
		${ATOM_LIBRARIES_INCLUDE_DIRECTORY}/GLFW/*.h
		${ATOM_LIBRARIES_INCLUDE_DIRECTORY}/KHR/*.h
	)

	file(GLOB ATOM_LIB_SOURCES
		${ATOM_DIRECTORY}/*.c
		${ATOM3D_DIRECTORY}/*.c
		${ATOM_LIBRARIES_SOURCE_DIRECTORY}/*.c

		${ATOM_DIRECTORY}/*.cpp
		${ATOM3D_DIRECTORY}/*.cpp
		${ATOM_LIBRARIES_SOURCE_DIRECTORY}/*.cpp
	)
endif()